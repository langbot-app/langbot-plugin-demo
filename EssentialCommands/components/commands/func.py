# Auto generated by LangBot Plugin SDK.
# Please refer to https://docs.langbot.app/en/plugin/dev/tutor.html for more details.
from __future__ import annotations

from typing import Any, AsyncGenerator

from langbot_plugin.api.definition.components.command.command import Command, Subcommand
from langbot_plugin.api.entities.builtin.command.context import ExecuteContext, CommandReturn


class Func(Command):
    
    async def initialize(self):
        await super().initialize()
        
        @self.subcommand(
            name="",
            help="Show all registered LLM tools",
            usage="func",
        )
        async def _(self: Func, context: ExecuteContext) -> AsyncGenerator[CommandReturn, None]:
            
            language = 'en_US'

            output_template = """
Available LLM Tools:

{tool_list}
            """.strip()

            tools = await self.plugin.list_tools()

            tool_list_str = ''

            for tool in tools:
                tool_manifest = tool['manifest']
                tool_list_str += f"{tool_manifest['metadata']['name']} - {tool_manifest['metadata']['description'][language]}\n - Prompt: {tool_manifest['spec']['llm_prompt']}\n"

            yield CommandReturn(
                text=output_template.format(tool_list=tool_list_str)
            )